<?xml version="1.0" encoding="UTF-8"?>
<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0" xmlns="http://www.w3.org/1999/xhtml" xmlns:xh="http://www.w3.org/1999/xhtml" xmlns:xpd="http://oracc.org/ns/xpd/1.0">
  <esp:name>Sort</esp:name>
  <esp:title>Oracc Grapheme Sorting</esp:title>
  <html>
    <head/>
    <body>

      <p>OSL is sorted according to the system-wide Oracc grapheme
      sorting algorithm which is defined in the the GDL library.  The
      same sort is used by PCSL and in sorting transliteration
      fragments such as the grammatical bases in Sumerian glossary
      articles.</p>

      <p>The algorithm works by splitting a grapheme into segments and
      comparing the segments in turn. The segments are:</p>

      <dl>

	<dt>GRAPHEME</dt><dd>The original grapheme</dd>

	<dt>TYPE</dt><dd>An integer which is 0 for regular graphemes; 1
	for punctuation; 2 for numbers.  This feature means that in a
	list of signs, regular graphemes sort first, punctuation
	follow in their own block, and numbers are at the end in their
	own block.</dd>

	<dt>BASE</dt><dd>The grapheme stripped of subscript digits or
	modifiers and lowercased.</dd>

	<dt>KEY</dt><dd><p>The BASE passed through Oracc's grapheme
	collation sequence; the letters in KEY are remapped so that
	characters such as <code>ŋ</code> and <code>š</code> sort
	after <code>g</code> and <code>s</code>
	respectively.</p>
	<p>The letter sort sequence is: <code> ʾ a b c
	d e f g ŋ h ḫ i j k l m n o p q r s ś š ṣ t ṭ u v w x y
	z</code></p></dd>

	<dt>MODS</dt><dd>A list of zero or more modifiers of the kind
	expressed with <code>@</code> and <code>~</code> in ATF.</dd>

	<dt>INDEX</dt><dd>The grapheme index: subscript digits are
	mapped to ASCII digits and the sequence is converted to an
	integer; subscript <code>x</code> has an INDEX value of
	1000.</dd>

	<dt>REPEAT</dt><dd>The repeat count for a number as an
	integer; -1 is a flag value for no repeater.</dd>
      </dl>

      <p>Sorting is carried out with the C library <code>qsort</code>
      function which compares two items at a time. Wwhen two segments
      compare different (including where one grapheme has the
      segment and the other does not) comparison stops and a result is
      returned. The steps are:</p>

      <ol>
	<li>Compare TYPE</li>
	<li>Compare KEY</li>
	<li>Compare INDEX</li>
	<li><p>Compare MODS; each MOD is a single <code>@</code> or
	<code>~</code> item. MODs with <code>~</code> sort before MODs
	with <code>@</code> because the <code>~</code> indicates a
	glyph-variant whereas a <code>@</code> indicates a new sign
	created by modifying another sign in the ways specified by the
	<code>@</code>-modifier.</p>
	<p>By definition of the data-type in
	Oracc, MODS are ASCII alphanumeric sequences matching
	<code>[~@][a-z0-9]+</code>. They are normally compared with a
	simple string comparison so they sort in simple alphabetic
	order, but an exception is made for the modifiers that consist
	entirely of digits <code>0..9</code> such as <code>@90</code>,
	etc.  These are sorted in numeric sequence.</p></li>
	<li>Compare REPEAT</li>
	<li>If this point is reached the graphemes are the same; if
	they differ in letter case then lower case is sorted before
	upper.</li>
      </ol>

      <esp:sh>Punctuation in Sorting</esp:sh>

      <p>A sign consisting of <code>P</code> followed by subscript
      digits is TYPE 1, punctuation.</p>

      <esp:sh>Numbers in Sorting</esp:sh>

      <p>Two broad categories of sign have TYPE 2, number:</p>

      <ul>
	<li>an upper or lower case <code>N/n</code> followed by
	optional digits <code>0..9</code>, e.g., <code>n N
	N01</code>. By convention, N-numbers smaller than 10 are
	padded with a leading zero so these can safely be compared as
	strings.</li>
	<li>a grapheme matching the form REPEATER(GRAPHEME), where
	REPEATER is either <code>n</code>, <code>N</code>, or a series
	of digits <code>0..9</code>. By convention, REPEATER is not
	padded with leading zeroes, so they must be compared as
	integers in order for 1(N01) and 10(N01) to sort
	correctly.</li>
      </ul>

      <p>Because numbers are compared with BASE first and REPEAT last,
      all of the numbers with the same GRAPHEME are grouped
      together--1(N01), 2(N02) etc., then 1(N01@f) and so on.</p>

      <esp:sh>Graphemes with Numeric Multipliers like |3×AN|</esp:sh>

      <p>Multipler graphemes have special treatment and are sorted as
      though they were REPEAT(GRAPHEME), like numbers but with TYPE=0.
      This means that <code>|3×AN|</code> sorts immediately after
      AN.</p>
      
    </body>
  </html>
</esp:page>
