<?xml version="1.0" encoding="UTF-8"?>
<esp:page xmlns:esp="http://oracc.org/ns/esp/1.0" xmlns="http://www.w3.org/1999/xhtml" xmlns:xh="http://www.w3.org/1999/xhtml" xmlns:xpd="http://oracc.org/ns/xpd/1.0">
  <esp:name>Sorting</esp:name>
  <esp:title>Oracc Grapheme Sorting</esp:title>
  <html>
    <head/>
    <body>

      <p>OSL is sorted according to the system-wide Oracc grapheme
      sorting algorithm which is defined in the the GDL library.  The
      same sort is used by PCSL and in sorting transliteration
      fragments such as the grammatical bases in Sumerian glossary
      articles.  A separate page gives the reference version of the
      <esp:link url="/osl/signlist/SortOrder/">OSL sort
      order</esp:link>.</p>

      <p>A <code>sequence</code> is one or more graphemes which are
      normally separated by delimiters. In the normal case, a
      <code>sort-item</code> is created for each grapheme or delimiter
      and added to the list of <code>sort-items</code> that represents
      the <code>sequence</code>.</p>

      <p>The exception is that determinatives do not have a delimiter
      on one side--after the determinative for preposed determinatives
      and before the determinative for postposed
      determinatives. Following normal disciplinary practice,
      determinatives are ignored when sorting so no
      <code>sort-item</code> is created for determinatives--any
      preceding or following delimiters are added to the list of
      <code>sort-items</code>.</p>

      <p>The algorithm works by splitting a <code>sort-item</code>
      into segments and comparing the segments in turn. The segments
      are:</p>

      <dl>

	<dt>TEXT</dt><dd>The original grapheme or delimiter.</dd>

	<dt>TYPE</dt><dd>An integer which is 0 for regular graphemes
	and for delimiters; 1 for punctuation; 2 for numbers.</dd>

	<dt>BASE</dt><dd>The TEXT stripped of subscript digits or
	modifiers and lowercased.</dd>

	<dt>KEY</dt><dd><p>The BASE passed through Oracc's grapheme
	collation sequence; the characters in KEY are remapped to
	conform to the delimiter and grapheme character and letter
	orders.</p>
	</dd>

	<dt>MODS</dt><dd>A list of zero or more modifiers of the kind
	expressed with <code>@</code> and <code>~</code> in ATF.</dd>

	<dt>INDEX</dt><dd>The grapheme index, if any.</dd>

	<dt>REPEAT</dt><dd>The repeat count for a number as an
	integer; -1 is a flag value for no repeater.</dd>

	<dt>SUFFIX</dt><dd>For list-patterned graphemes only; see
	<esp:link bookmark="h_listygraphemes">the description
	below</esp:link>.</dd>
      </dl>

      <p>Sorting is carried out with the C library <code>qsort</code>y
      function which compares two items at a time. The comparison
      routine, <code>gsort_cmp</code>, is in Oracc II's <esp:link
      url="https://github.com/oracc/oracc2/blob/main/lib/gdl/gsort.c">lib/gdl/gsort.c</esp:link>.</p>

      <p>Comparing items steps through the segments and when two
      segments compare different (including where one grapheme has the
      segment and the other does not) comparison stops and a result is
      returned. The steps are:</p>

      <ol>
	<li>Compare TYPE: the type values mean mean that in a list of
	signs, regular graphemes sort first, punctuation follows in
	its own block, and numbers are at the end in their own
	block.</li>

	<li>

	  <p>Compare KEY character by character.</p>

	  <p>Delimiters sort before letters. The character order for
	  delimiters puts the delimiters that separate juxtaposed
	  signs first, and those which represent integrative
	  relationships second: <code> SPACE - . + : @ × &amp; %
	  </code>. The algorithm also uses NULL delimiters to
	  influence sort order in a few cases.</p>

	  <p>The letter order for graphemes is: <code> ʾ a b c
	  d e f g ŋ h ḫ i j k l m n o p q r s ś š ṣ t ṭ u v w x y
	  z</code>.</p>
	</li>

	<li>Compare INDEX: subscript digits are mapped to ASCII digits
	and the sequence is converted to an integer; subscript
	<code>x</code> has an INDEX value of 1000. Graphemes with no
	explicit index have INDEX=0 so that X and X₁ sort as
	expected.</li>

	<li>Compare SUFFIX: suffixes occur only on list names. If one
	item has a suffix and the other does not, the one without
	suffix comes before the one with suffix.  If both items have
	suffixes they are subjected to a simple string compare.</li>

	<li>

	  <p>Compare MODS; each MOD is a single <code>@</code> or
	  <code>~</code> item. MODs with <code>~</code> sort before
	  MODs with <code>@</code> because the <code>~</code>
	  indicates a glyph-variant whereas a <code>@</code> indicates
	  a new sign created by modifying another sign in the ways
	  specified by the <code>@</code>-modifier.</p>

	  <p>By definition of the data-type in Oracc, MODS are ASCII
	  alphanumeric sequences matching
	  <code>[~@][a-z0-9]+</code>. They are normally compared with
	  a simple string comparison so they sort in simple alphabetic
	  order, but an exception is made for the modifiers that
	  consist entirely of digits <code>0..9</code> such as
	  <code>@90</code>, etc.  These are sorted in numeric
	  sequence.</p>
	</li>

	<li>Compare REPEAT</li>

	<li>If this point is reached the items are the same when
	lowercased; if they differ in letter case then lower case is
	sorted before upper.</li>
      </ol>

      <esp:sh>Punctuation in Sorting</esp:sh>

      <p>A sign consisting of <code>P</code> followed by subscript
      digits is TYPE 1, punctuation.</p>

      <esp:sh>Numbers in Sorting</esp:sh>

      <p>Three categories of sign have TYPE 2, number:</p>

      <ul>
	<li>an upper or lower case <code>N/n</code> followed by
	optional digits <code>0..9</code>, e.g., <code>n N
	N01</code>. By convention, N-numbers smaller than 10 are
	padded with a leading zero so these can safely be compared as
	strings.</li>
	<li>a grapheme matching the form REPEATER(GRAPHEME), where
	REPEATER is either <code>n</code>, <code>N</code>, or a series
	of digits <code>0..9</code>. By convention, REPEATER is not
	padded with leading zeroes, so they must be compared as
	integers in order for 1(N01) and 10(N01) to sort
	correctly.</li>
	<li>The fraction graphemes F₁, F₂, etc.</li>
      </ul>

      <p>Because numbers are compared with BASE first and REPEAT last,
      all of the numbers with the same GRAPHEME are grouped
      together--1(N01), 2(N02) etc., then 1(N01@f) and so on.</p>

      <p>See also the section on mixed number/non-number compounds
      below.</p>

      <esp:sh>Qualified Graphemes</esp:sh>

      <p>Qualified graphemes such as <code>ašₓ(AB)</code> are treated
      as sequences with the value and sign separated by a NULL
      delimiter.</p>
      
      <esp:sh>Multiplier Graphemes</esp:sh>

      <p>Multiplier graphemes have special treatment and are sorted as
      though they were REPEAT(GRAPHEME), like numbers but with
      TYPE=0. In addition, a NULL delimiter is added after the
      multiplier grapheme to ensure that it sorts after the base
      grapheme.  This means that <code>|3×AN|</code> sorts immediately
      after AN, for example.</p>

      <esp:sh>Listy Graphemes</esp:sh>

      <p>List numbers are segmented slightly differently from regular
      graphemes although they have the same type. The sort algorithm
      considers any grapheme that fails the number-pattern test but
      contains 1 or more ASCII digits to be a "list", or listy
      grapheme. The part before the digits becomes BASE; the digits
      are converted to an integer and the INDEX is set to 10000 + the
      integer result of the digit conversion.  If anything follows the
      digits it becomes the SUFFIX segment. A list name could also
      potentially have MODS, e.g., <code>LAK001a@c</code>.</p>

      <esp:sh>Mixed Number/Non-Number Compounds</esp:sh>

      <p>In Proto-Cuneiform there are compounds such as |1(N57).ŠAH₂|
      which are considered as non-numbers for the purposes of Unicode
      PC and which are sorted by the Oracc sort in the regular
      grapheme block rather than the number block.</p>

      <p>This is done by coercing the type of the first
      <code>sort-item</code> to 0, regular grapheme, but leaving the
      rest of the segments the same. The BASE is then N57, which sorts
      before NA; the group of N57.X compounds is kept together in the
      sorted sequence because the number-like BASE-then-REPEAT
      sorting is still obeyed.</p>
      
    </body>
  </html>
</esp:page>
